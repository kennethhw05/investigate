# Time is an RFC3339 timestamp.
scalar Time

# Arbitrary precision decimal
scalar Decimal

# JSON blob for unstructured data
scalar JSON

enum AccessRole {
  SUPER_ADMIN
  ADMIN
  USER
  GUEST_API_ONLY
}

enum ProductType {
  OUTLAST
  BRAWL
  HERO
}

enum EventType {
  TOURNAMENT
}

enum PoolType {
  H2H
  OVER_UNDER
  FANTASY
}

enum PoolStatus {
  NOT_READY
  NEEDS_APPROVAL
  SYNC_ERROR
  APPROVED
  CREATED
  VISIBLE
  TRADING_OPEN
  TRADING_CLOSED
  OFFICIAL
  SETTLED
  ABANDONED
}

enum PoolCurrency {
  STR
}

enum MatchColossusStatus {
  UNKNOWN
  NOT_STARTED
  SYNC_ERROR
  IN_PLAY
  COMPLETED
  OFFICIAL
  ABANDONED
}

enum MatchInternalStatus {
  NOT_READY
  SCHEDULED
  IN_PROGRESS
  FINISHED
  CLOSED
  POSTPONED
  SUSPENDED
  DELAYED
  CANCELLED
  INTERRUPTED
  ABANDONED
  UNKNOWN
}

enum MatchFormat {
  bo2
  bo3
  bo5
  UNKNOWN
}

enum Game {
  COUNTER_STRIKE_GLOBAL_OFFENSIVE
  DOTA_2
  LEAGUE_OF_LEGENDS
  PUBG
  APEX_LEGENDS
  UNDERLORDS
  TEAMFIGHT_TACTICS
  AUTO_CHESS
  STARCRAFT_2
  OVERWATCH
  RAINBOW_SIX_SIEGE
  HEARTHSTONE
  HEROES_OF_THE_STORM
  WARCRAFT_3
  ROCKET_LEAGUE
  CALL_OF_DUTY
  VAIN_GLORY
  HALO
  QUAKE
  KING_OF_GLORY
  WORLD_OF_WARCRAFT
  FIFA
  SMITE
  WORLD_OF_TANKS
  GWENT
  MADDEN
  BATTLEFIELD_5
  NBA2K
  STREET_FIGHTER
  STARCRAFT_BROODWAR
  MAGIC_THE_GATHERING
  UNKNOWN
}

enum EditAction {
  CREATE
  UPDATE
  DELETE
}

type TeamScore {
  teamId: String!
  score: Int!
}
type TeamWinProbability {
  teamId: String!
  probability: Decimal!
}

type Event {
  id: ID!
  name: String!
  externalId: String!
  type: EventType!
  game: Game!
  logo: String!
  startDate: Time
  endDate: Time
  isActive: Boolean!
  isAutogenerated: Boolean!
  matches: [Match!]!
}

type Match {
  id: ID!
  eventId: ID!
  externalId: String!
  name: String!
  description: String!
  startTime: Time
  isActive: Boolean!
  isAutogenerated: Boolean!
  internalStatus: MatchInternalStatus!
  eventStage: String!
  competitors: [Competitor!]!
  statistics: JSON!
  teamScores: [TeamScore!]!
  teamOuScores: [TeamScore!]!
  teamWinProbabilities: [TeamWinProbability!]!
  format: MatchFormat!
  history: [Audit!]
}

type TeamScores {
  teamId: ID!
  score: Int!
}

type TeamProbabilities {
  teamId: ID!
  probability: Float!
}

type Competitor {
  id: ID!
  externalId: String!
  name: String!
  logo: String!
  matches: [Match]
}

type Player {
  id: ID!
  externalId: String!
  name: String!
  nickname: String!
  teamId: ID!
}

type ConsolationPrize {
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
}

type Pool {
  id: ID!
  name: String!
  type: PoolType!
  isActive: Boolean!
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
  note: String!
  unitValue: Decimal!
  minUnitPerLine: Decimal!
  maxUnitPerLine: Decimal!
  minUnitPerTicket: Decimal!
  maxUnitPerTicket: Decimal!
  currency: PoolCurrency!
  isAutogenerated: Boolean!
  lastSyncTime: Time
  syncedColossusStatus: PoolStatus!
  game: Game!
  legs: [Leg!]!
  consolationPrizes: [ConsolationPrize!]
}

type PoolDefault {
  id: ID!
  legCount: Decimal!
  game: Game!
  type: PoolType!
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
  unitValue: Decimal!
  minUnitPerLine: Decimal!
  maxUnitPerLine: Decimal!
  minUnitPerTicket: Decimal!
  maxUnitPerTicket: Decimal!
  currency: PoolCurrency!
  note: String!
}

type Leg {
  id: ID!
  lastSyncTime: Time
  threshold: Decimal!
  matchId: ID!
  poolId: ID!
}

type User {
  id: ID!
  email: String!
  token: String!
  accessRole: AccessRole!
}

type Audit {
  id: ID!
  time: Time!
  targetId: ID!
  targetType: String!
  user: User!
  editAction: EditAction!
  content: String!
}

type Session {
  token: String!
}

type OverUnderDefault {
  id: ID!
  game: Game!
  matchFormat: MatchFormat!
  evenThreshold: Decimal!
  favoredThreshold: Decimal!
  note: String!
}

type ListMetadata {
  count: Int!
}

input EventFilter {
  id: ID
  name: String
  isActive: Boolean
  game: Game
  externalId: String
  ids: [ID!]
}

input UserFilter {
  email: String
  role: AccessRole
  ids: [ID!]
}

input AuditFilter {
  id: ID
  targetId: ID
  targetType: String
  userId: ID
  editAction: EditAction
  ids: [ID!]
}

input LegFilter {
  id: ID
  matchId: ID
  poolId: ID
  ids: [ID!]
}

input PlayerFilter {
  id: ID
  name: String
  nickname: String
  externalId: String
  teamId: ID
  ids: [ID!]
}

input CompetitorFilter {
  id: ID
  name: String
  externalId: String
  match_id: String
  ids: [ID!]
}

input PoolFilter {
  id: ID
  name: String
  isActive: Boolean
  isAutogenerated: Boolean
  poolStatus: PoolStatus
  guarantee: Decimal
  legCount: Decimal
  type: PoolType
  game: Game
  eventId: ID
  lastSyncTimeBefore: Time
  lastSyncTimeAfter: Time
  ids: [ID!]
}

input PoolDefaultFilter {
  type: PoolType
  game: Game
}

input MatchFilter {
  id: ID
  name: String
  externalId: String
  isActive: Boolean
  isAutogenerated: Boolean
  internalStatus: MatchInternalStatus
  format: MatchFormat
  eventStage: String
  eventId: ID
  ids: [ID!]
}

input OverUnderDefaultFilter {
  game: Game
  matchFormat: MatchFormat
  ids: [ID!]
}

input AuthInput {
  email: String!
  password: String!
}

input CreateUserInput {
  email: String!
  password: String!
  role: AccessRole!
}

input UpdateUserInput {
  id: ID!
  email: String
  password: String
  accessRole: AccessRole
}

input CreateEventInput {
  name: String!
  type: EventType!
  game: Game!
  logo: String
  startDate: Time!
  endDate: Time!
  isActive: Boolean
}

input UpdateEventInput {
  id: ID!
  name: String
  type: EventType
  game: Game
  logo: String
  startDate: Time
  endDate: Time
  isActive: Boolean
}

input CreateMatchInput {
  name: String!
  eventId: ID!
  description: String
  startTime: Time!
  isActive: Boolean
  internalStatus: MatchInternalStatus!
  eventStage: String!
  format: MatchFormat!
}

input UpdateTeamScores {
  teamId: String!
  score: Int!
}

input UpdateTeamProbabilities {
  teamId: String!
  probability: Float!
}

input UpdateMatchInput {
  id: ID!
  name: String
  description: String
  startTime: Time
  isActive: Boolean
  internalStatus: MatchInternalStatus
  eventStage: String
  eventId: ID
  teamScores: [UpdateTeamScores!]
  teamOuScores: [UpdateTeamScores!]
  teamWinProbabilities: [UpdateTeamProbabilities!]
  format: MatchFormat
}

input CreateCompetitorInput {
  name: String!
  logo: String
}

input UpdateCompetitorInput {
  id: ID!
  name: String
  logo: String
}

input CreatePlayerInput {
  name: String!
  nickname: String
  teamId: ID!
}

input UpdatePlayerInput {
  id: ID!
  name: String
  nickname: String
  teamId: ID
}

input CreatePoolInput {
  name: String!
  type: PoolType!
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
  game: Game!
  note: String
  unitValue: Decimal!
  currency: PoolCurrency!
  minUnitPerLine: Decimal!
  maxUnitPerLine: Decimal!
  minUnitPerTicket: Decimal!
  maxUnitPerTicket: Decimal!
}

input UpdateConsolationPrize {
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
}

input UpdatePoolInput {
  id: ID!
  name: String
  isActive: Boolean
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
  note: String
  unitValue: Decimal
  minUnitPerLine: Decimal
  maxUnitPerLine: Decimal
  minUnitPerTicket: Decimal
  maxUnitPerTicket: Decimal
  currency: PoolCurrency
  syncedColossusStatus: PoolStatus
  legsIds: [ID!]
  consolationPrizes: [UpdateConsolationPrize!]
}

input CreatePoolDefaultInput {
  legCount: Decimal!
  game: Game!
  type: PoolType!
  guarantee: Decimal!
  carryIn: Decimal!
  allocation: Decimal!
  unitValue: Decimal!
  minUnitPerLine: Decimal!
  maxUnitPerLine: Decimal!
  minUnitPerTicket: Decimal!
  maxUnitPerTicket: Decimal!
  currency: PoolCurrency!
  note: String
}

input UpdatePoolDefaultInput {
  id: ID!
  legCount: Decimal
  game: Game
  type: PoolType
  guarantee: Decimal
  carryIn: Decimal
  allocation: Decimal
  unitValue: Decimal
  minUnitPerLine: Decimal
  maxUnitPerLine: Decimal
  minUnitPerTicket: Decimal
  maxUnitPerTicket: Decimal
  currency: PoolCurrency
  note: String
}

input CreateLegInput {
  matchId: ID!
  poolId: ID!
  threshold: Decimal
}

input UpdateLegInput {
  id: ID!
  threshold: Decimal
  matchId: ID
  poolId: ID
}

input CreateOverUnderDefaultInput {
  game: Game!
  matchFormat: MatchFormat!
  evenThreshold: Decimal!
  favoredThreshold: Decimal!
  note: String
}

input UpdateOverUnderDefaultInput {
  id: ID!
  evenThreshold: Decimal
  favoredThreshold: Decimal
  note: String
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!

  createSession(input: AuthInput!): Session!

  createEvent(input: CreateEventInput!): Event!
  updateEvent(input: UpdateEventInput!): Event!
  deleteEvent(id: ID!): Event!

  createMatch(input: CreateMatchInput!): Match!
  updateMatch(input: UpdateMatchInput!): Match!
  deleteMatch(id: ID!): Match!

  createCompetitor(input: CreateCompetitorInput!): Competitor!
  updateCompetitor(input: UpdateCompetitorInput!): Competitor!
  deleteCompetitor(id: ID!): Competitor!

  createPlayer(input: CreatePlayerInput!): Player!
  updatePlayer(input: UpdatePlayerInput!): Player!
  deletePlayer(id: ID!): Player!

  createPool(input: CreatePoolInput!): Pool!
  updatePool(input: UpdatePoolInput!): Pool!
  deletePool(id: ID!): Pool!

  createPoolDefault(input: CreatePoolDefaultInput!): PoolDefault!
  updatePoolDefault(input: UpdatePoolDefaultInput!): PoolDefault!
  deletePoolDefault(id: ID!): PoolDefault!

  createLeg(input: CreateLegInput!): Leg!
  updateLeg(input: UpdateLegInput!): Leg!
  deleteLeg(id: ID!): Leg!

  createOverUnderDefault(input: CreateOverUnderDefaultInput!): OverUnderDefault!
  updateOverUnderDefault(input: UpdateOverUnderDefaultInput!): OverUnderDefault!
  deleteOverUnderDefault(id: ID!): OverUnderDefault!
}

type Query {
  Event(id: ID!): Event!
  allEvents(
    filter: EventFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Event!]!
  _allEventsMeta(filter: EventFilter, page: Int, perPage: Int): ListMetadata

  Pool(id: ID!): Pool!
  allPools(
    filter: PoolFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Pool!]!
  _allPoolsMeta(filter: PoolFilter, page: Int, perPage: Int): ListMetadata

  PoolDefault(id: ID!): PoolDefault!
  allPoolDefaults(
    filter: PoolDefaultFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [PoolDefault!]!
  _allPoolDefaultsMeta(
    filter: PoolDefaultFilter
    page: Int
    perPage: Int
  ): ListMetadata

  Leg(id: ID!): Leg!
  allLegs(
    filter: LegFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Leg!]!
  _allLegsMeta(filter: LegFilter, page: Int, perPage: Int): ListMetadata

  Match(id: ID!): Match!
  allMatches(
    filter: MatchFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Match!]!
  _allMatchesMeta(filter: MatchFilter, page: Int, perPage: Int): ListMetadata

  Competitor(id: ID!): Competitor!
  allCompetitors(
    filter: CompetitorFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Competitor!]!
  _allCompetitorsMeta(
    filter: CompetitorFilter
    page: Int
    perPage: Int
  ): ListMetadata

  Player(id: ID!): Player!
  allPlayers(
    filter: PlayerFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Player!]!
  _allPlayersMeta(filter: PlayerFilter, page: Int, perPage: Int): ListMetadata

  User(id: ID!): User!
  allUsers(
    filter: UserFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [User!]!
  _allUsersMeta(filter: UserFilter, page: Int, perPage: Int): ListMetadata

  Audit(id: ID!): Audit!
  allAudits(
    filter: AuditFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [Audit!]!
  _allAuditsMeta(filter: AuditFilter, page: Int, perPage: Int): ListMetadata

  OverUnderDefault(id: ID!): OverUnderDefault!
  allOverUnderDefaults(
    filter: OverUnderDefaultFilter
    page: Int
    perPage: Int
    sortField: String
    sortOrder: String
  ): [OverUnderDefault!]!
  _allOverUnderDefaultsMeta(
    filter: OverUnderDefaultFilter
    page: Int
    perPage: Int
  ): ListMetadata
}
